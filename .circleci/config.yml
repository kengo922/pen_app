version: 2
jobs:
  build:
    docker:
    - image: circleci/ruby:2.7.1-node-browsers
      environment:
        - BUNDLER_VERSION: 2.1.4
        - RAILS_ENV: 'test'
    - image: circleci/mysql:8.0
      command: mysqld --default-authentication-plugin=mysql_native_password
      environment:
        - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
        - MYSQL_ROOT_HOST: '127.0.0.1'

    working_directory: ~/myapp  #自身のアプリディレクトリ名を設定
    # 実行ディレクトリを設定する。デフォルトは ~/project

    # CI環境上で動作させるコマンドや実行結果の保存、キャッシュ操作などを設定する
    steps:
    - checkout
    # CI環境上の working_directory の値の場所にGitリポジトリをコピーする。
    - restore_cache: #キャッシュが save_cache されていればリストアする(あれば速くなる)
        keys: #リストアするキャッシュを複数指定する。 (リストア: バックアップされたファイルやデータを使って、元の状態に戻すこと)
        - v1-dependencies-{{ checksum "Gemfile.lock" }}
        - v1-dependencies-

    - run:
        name: install dependencies
        command: |
          gem install bundler -v 2.1.4
          bundle install --jobs=4 --retry=3 --path vendor/bundle
    - save_cache:
        paths:
        - ./vendor/bundle
        key: v1-dependencies-{{ checksum "Gemfile.lock" }}

    # Database setup
    - run: mv ./config/database.yml.ci ./config/database.yml

    # Database setup
    - run:
        name: Databasesetup
        command: |
           bundle exec rake db:create
           bundle exec rake db:schema:load
    # run tests!
    - run:
        name: Run rspec
        command: |
          mkdir /tmp/test-results
          TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
            circleci tests split --split-by=timings)"
          bundle exec rspec \
            --format progress \
            --format RspecJunitFormatter \
            --out /tmp/test-results/rspec.xml \
            --format progress \
            $TEST_FILES
    # collect reports
    - store_test_results:
        path: /tmp/test-results
    - store_artifacts: # ログやカバレッジ、jarファイルなどのバイナリをS3にアップロードして保管する(3GBまで)。アップロードされたファイルはCircleCIのWeb-UI上で確認できる。
        path: /tmp/test-results
        destination: test-

    - add_ssh_keys:
      fingerprints:
        - "XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX"

    - deploy:
      name: Capistrano deploy
      command:
        bundle exec cap production deploy

# un: コマンドを実行する
# name: 任意のrunの名前
# command: コマンドを設定する

# カバーしている範囲。または、テストカバレッジ（テストにおいて全体のどれくらいの確認が終わったか）のこと。
